{"version":3,"sources":["Components/contactForm/ContactForm.module.css","Components/redux/contacts/contactsActions.js","Components/contactForm/ContactForm.js","Components/contactList/contactListItem/ContactListItem.js","Components/contactList/ContactList.js","Components/filter/Filter.js","Components/App.js","Components/redux/contacts/contactsReducer.js","Components/redux/store.js","index.js"],"names":["module","exports","addNewContact","createAction","removeContactById","filteredContacts","initialState","name","number","id","ContactForm","onAddNewContact","useState","contact","setContact","onHandleChange","e","target","value","prev","onSubmit","preventDefault","uuidv4","console","log","className","styles","form_label","type","pattern","title","required","onChange","ContactListItem","onClick","ContactList","contacts","filterValue","newArr","filter","toLowerCase","includes","length","map","connect","dispatch","onFilterInput","query","state","items","useEffect","localStorage","setItem","JSON","stringify","contactsListReducer","createReducer","parse","getItem","payload","some","alert","contactsFilterReducer","_","contactsReducer","combineReducers","store","configureStore","reducer","devTools","process","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5e8758d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_label\":\"ContactForm_form_label__2BJza\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// import { ADDCONTACT, REMOVECONTACT, FILTER } from \"./contactsTypes\";\r\n\r\n// const addNewContact = (contact) => ({\r\n//   type: ADDCONTACT,\r\n//   payload: contact,\r\n// });\r\n\r\nconst addNewContact = createAction(\"contacts/addContact\");\r\n\r\n// const removeContactById = (id) => ({\r\n//   type: REMOVECONTACT,\r\n//   payload: id,\r\n// });\r\n\r\nconst removeContactById = createAction(\"contacts/removeContact\");\r\n\r\n// const filteredContacts = (query) => ({\r\n//   type: FILTER,\r\n//   payload: query,\r\n// });\r\n\r\nconst filteredContacts = createAction(\"contacts/filteredContacts\");\r\n\r\nexport { addNewContact, removeContactById, filteredContacts };\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  number: \"\",\r\n  id: \"\",\r\n};\r\n\r\nconst ContactForm = ({ onAddNewContact }) => {\r\n  const [contact, setContact] = useState(initialState);\r\n\r\n  const onHandleChange = (e) => {\r\n    const { value, name } = e.target;\r\n    setContact((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handelSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    contact.id = uuidv4();\r\n\r\n    onAddNewContact(contact);\r\n    console.log(contact);\r\n    setContact({ ...initialState });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handelSubmitForm}>\r\n      <label className={styles.form_label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={contact.name}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={contact.number}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     onAddNewContact: () => dispatch(addNewContact()),\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n\r\nconst ContactListItem = ({ contact, removeContactById }) => {\r\n  const remove = () => {\r\n    removeContactById(contact.id);\r\n  };\r\n  return (\r\n    <li>\r\n      <p>\r\n        {contact.name}: {contact.number}\r\n      </p>\r\n      <button onClick={remove}>DELETE</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from \"react\";\r\nimport ContactListItem from \"./contactListItem/ContactListItem\";\r\n\r\nconst ContactList = ({ contacts, filterValue, removeContactById }) => {\r\n  const newArr = [...contacts].filter((contact) => {\r\n    console.log(contact.name);\r\n    return contact.name.toLowerCase().includes(filterValue.toLowerCase());\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {contacts.length !== 0 ? (\r\n        <>\r\n          {newArr.length !== 0 ? (\r\n            <ul>\r\n              {newArr.map((contact) => (\r\n                <ContactListItem\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  removeContactById={removeContactById}\r\n                />\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>There is no such contact ;(</p>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>Please enter your first contact ;)</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { filteredContacts } from \"../redux/contacts/contactsActions\";\r\n\r\nconst Filter = ({ onFilterInput }) => {\r\n  const onFilterInputChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    onFilterInput(value);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name:\r\n      <input type=\"text\" onChange={onFilterInputChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onFilterInput: (query) => dispatch(filteredContacts(query)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addNewContact,\r\n  removeContactById,\r\n} from \"./redux/contacts/contactsActions\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport Filter from \"./filter/Filter\";\r\n\r\nconst App = ({ contacts, filter, onAddNewContact, removeContactById }) => {\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onAddNewContact={onAddNewContact} />\r\n\r\n      <h2>Contacts</h2>\r\n      {contacts.length !== 0 && <Filter filter={filter} />}\r\n\r\n      <ContactList\r\n        contacts={contacts}\r\n        filterValue={filter}\r\n        removeContactById={removeContactById}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddNewContact: (contact) => dispatch(addNewContact(contact)),\r\n  removeContactById: (id) => dispatch(removeContactById(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addNewContact,\r\n  removeContactById,\r\n  filteredContacts,\r\n} from \"./contactsActions\";\r\n// import { ADDCONTACT, REMOVECONTACT, FILTER } from \"./contactsTypes\";\r\n\r\nconst contactsListReducer = createReducer(\r\n  JSON.parse(localStorage.getItem(\"contacts\")) || [\r\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n  ],\r\n  {\r\n    [addNewContact]: (state, { payload }) => {\r\n      if (\r\n        state.some((contact) =>\r\n          contact.name.toLowerCase().includes(payload.name.toLowerCase())\r\n        )\r\n      ) {\r\n        alert(`${payload.name} is already in contacts.`);\r\n        return;\r\n      }\r\n      return [...state, payload];\r\n    },\r\n    [removeContactById]: (state, { payload }) =>\r\n      state.filter((contact) => contact.id !== payload),\r\n  }\r\n);\r\n\r\n// const contactsListReducer = (\r\n//   state = [\r\n//     { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//     { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//     { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//     { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n//   ],\r\n//   { type, payload }\r\n// ) => {\r\n//   switch (type) {\r\n//     case ADDCONTACT:\r\n//       return [...state, payload];\r\n//     case REMOVECONTACT:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst contactsFilterReducer = createReducer(\"\", {\r\n  [filteredContacts]: (_, { payload }) => payload,\r\n});\r\n\r\n// const contactsFilterReduser = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: contactsListReducer,\r\n  filter: contactsFilterReducer,\r\n});\r\nexport default contactsReducer;\r\n","// import { combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\n// {\r\n//     contacts: {\r\n//           items: [{}, {}, ...],\r\n//           filter: ''\r\n//   }\r\n// }\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./Components/App\";\nimport store from \"./Components/redux/store\";\nimport \"./index.css\";\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}